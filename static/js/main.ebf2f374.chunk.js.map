{"version":3,"sources":["Header.js","MemeGenerator.js","App.js","reportWebVitals.js","index.js"],"names":["Header","MemeGenerator","state","topText","bottomText","randomImg","allMemeImgs","handleChange","bind","fetch","then","response","json","memes","data","setState","event","target","name","value","this","className","type","placeholder","onChange","class","src","alt","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NASeA,MARf,WACI,OACE,iCACI,mD,0CCwDKC,E,kDAzDX,aAAc,IAAD,8BACT,gBACKC,MAAQ,CACTC,QAAS,GACTC,WAAY,GACZC,UAAW,gCACXC,YAAa,IAEjB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBARX,E,qDAWb,WAAqB,IAAD,OAChBC,MAAM,qCACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACF,IAAOE,EAASF,EAASG,KAAlBD,MACP,EAAKE,SAAU,CAAET,YAAaO,S,0BAI1C,SAAaG,GACT,MAAsBA,EAAMC,OAArBC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,MACbC,KAAKL,SAAL,eAAkBG,EAAOC,M,oBAG7B,WACI,OACI,gCACI,uBAAME,UAAY,YAAlB,UACI,uBACIC,KAAK,OACLJ,KAAK,UACLK,YAAY,WACZJ,MAAOC,KAAKlB,MAAMC,QAClBqB,SAAUJ,KAAKb,eAEnB,uBACIe,KAAK,OACLJ,KAAK,aACLK,YAAY,cACZJ,MAAOC,KAAKlB,MAAME,WAClBoB,SAAUJ,KAAKb,eAGnB,+CAGJ,sBAAKkB,MAAM,OAAX,UACI,qBAAKC,IAAKN,KAAKlB,MAAMG,UAAWsB,IAAI,aACpC,oBAAIF,MAAM,MAAV,SAAiBL,KAAKlB,MAAMC,UAC5B,oBAAIsB,MAAM,SAAV,SAAoBL,KAAKlB,MAAME,uB,GAnDvBwB,aCWbC,MATf,WACE,OACE,sBAAKR,UAAU,MAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,QCIOS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ebf2f374.chunk.js","sourcesContent":["\r\nfunction Header() {\r\n    return (\r\n      <header>\r\n          <h1>Meme Generator</h1>\r\n      </header>\r\n    );\r\n  }\r\n  \r\nexport default Header;\r\n  ","import React, {Component} from 'react';\r\n\r\nclass MemeGenerator extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            topText: \"\",\r\n            bottomText: \"\",\r\n            randomImg: \"http://i.imgflip.com/1bij.jpg\",\r\n            allMemeImgs: []\r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                const {memes} = response.data\r\n                this.setState( { allMemeImgs: memes } )\r\n            })\r\n    }\r\n\r\n    handleChange(event) {\r\n        const {name, value} = event.target\r\n        this.setState( { [name]: value } )\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <form className = \"meme-form\">\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"topText\"\r\n                        placeholder=\"Top Text\"\r\n                        value={this.state.topText}\r\n                        onChange={this.handleChange}\r\n                    />\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"bottomText\"\r\n                        placeholder=\"Bottom Text\"\r\n                        value={this.state.bottomText}\r\n                        onChange={this.handleChange}\r\n                    />\r\n\r\n                    <button>Create</button>\r\n                </form>\r\n\r\n                <div class=\"meme\"> \r\n                    <img src={this.state.randomImg} alt=\"meme-img\"/>\r\n                    <h2 class=\"top\">{this.state.topText}</h2>\r\n                    <h2 class=\"bottom\">{this.state.bottomText}</h2>\r\n                </div>\r\n            </div>\r\n        )   \r\n    }\r\n} \r\n\r\nexport default MemeGenerator;\r\n  ","import './App.css';\nimport Header from './Header';\nimport MemeGenerator from './MemeGenerator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Header />\n        <MemeGenerator />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}